package com.opensource.techblog.sampleservice.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.opensource.techblog.sampleservice.model.Teacher;
import com.opensource.techblog.sampleservice.service.TeacherLocalService;
import com.opensource.techblog.sampleservice.service.persistence.StudentPersistence;
import com.opensource.techblog.sampleservice.service.persistence.TeacherPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the teacher local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.opensource.techblog.sampleservice.service.impl.TeacherLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.opensource.techblog.sampleservice.service.impl.TeacherLocalServiceImpl
 * @see com.opensource.techblog.sampleservice.service.TeacherLocalServiceUtil
 * @generated
 */
public abstract class TeacherLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements TeacherLocalService, IdentifiableBean {
    @BeanReference(type = com.opensource.techblog.sampleservice.service.StudentLocalService.class)
    protected com.opensource.techblog.sampleservice.service.StudentLocalService studentLocalService;
    @BeanReference(type = com.opensource.techblog.sampleservice.service.StudentService.class)
    protected com.opensource.techblog.sampleservice.service.StudentService studentService;
    @BeanReference(type = StudentPersistence.class)
    protected StudentPersistence studentPersistence;
    @BeanReference(type = com.opensource.techblog.sampleservice.service.TeacherLocalService.class)
    protected com.opensource.techblog.sampleservice.service.TeacherLocalService teacherLocalService;
    @BeanReference(type = com.opensource.techblog.sampleservice.service.TeacherService.class)
    protected com.opensource.techblog.sampleservice.service.TeacherService teacherService;
    @BeanReference(type = TeacherPersistence.class)
    protected TeacherPersistence teacherPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TeacherLocalServiceClpInvoker _clpInvoker = new TeacherLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.opensource.techblog.sampleservice.service.TeacherLocalServiceUtil} to access the teacher local service.
     */

    /**
     * Adds the teacher to the database. Also notifies the appropriate model listeners.
     *
     * @param teacher the teacher
     * @return the teacher that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Teacher addTeacher(Teacher teacher) throws SystemException {
        teacher.setNew(true);

        return teacherPersistence.update(teacher);
    }

    /**
     * Creates a new teacher with the primary key. Does not add the teacher to the database.
     *
     * @param teacherId the primary key for the new teacher
     * @return the new teacher
     */
    @Override
    public Teacher createTeacher(long teacherId) {
        return teacherPersistence.create(teacherId);
    }

    /**
     * Deletes the teacher with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param teacherId the primary key of the teacher
     * @return the teacher that was removed
     * @throws PortalException if a teacher with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Teacher deleteTeacher(long teacherId)
        throws PortalException, SystemException {
        return teacherPersistence.remove(teacherId);
    }

    /**
     * Deletes the teacher from the database. Also notifies the appropriate model listeners.
     *
     * @param teacher the teacher
     * @return the teacher that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Teacher deleteTeacher(Teacher teacher) throws SystemException {
        return teacherPersistence.remove(teacher);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Teacher.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return teacherPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.opensource.techblog.sampleservice.model.impl.TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return teacherPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.opensource.techblog.sampleservice.model.impl.TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return teacherPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return teacherPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return teacherPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Teacher fetchTeacher(long teacherId) throws SystemException {
        return teacherPersistence.fetchByPrimaryKey(teacherId);
    }

    /**
     * Returns the teacher with the primary key.
     *
     * @param teacherId the primary key of the teacher
     * @return the teacher
     * @throws PortalException if a teacher with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Teacher getTeacher(long teacherId)
        throws PortalException, SystemException {
        return teacherPersistence.findByPrimaryKey(teacherId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return teacherPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the teachers.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.opensource.techblog.sampleservice.model.impl.TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of teachers
     * @param end the upper bound of the range of teachers (not inclusive)
     * @return the range of teachers
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Teacher> getTeachers(int start, int end)
        throws SystemException {
        return teacherPersistence.findAll(start, end);
    }

    /**
     * Returns the number of teachers.
     *
     * @return the number of teachers
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getTeachersCount() throws SystemException {
        return teacherPersistence.countAll();
    }

    /**
     * Updates the teacher in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param teacher the teacher
     * @return the teacher that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Teacher updateTeacher(Teacher teacher) throws SystemException {
        return teacherPersistence.update(teacher);
    }

    /**
     * Returns the student local service.
     *
     * @return the student local service
     */
    public com.opensource.techblog.sampleservice.service.StudentLocalService getStudentLocalService() {
        return studentLocalService;
    }

    /**
     * Sets the student local service.
     *
     * @param studentLocalService the student local service
     */
    public void setStudentLocalService(
        com.opensource.techblog.sampleservice.service.StudentLocalService studentLocalService) {
        this.studentLocalService = studentLocalService;
    }

    /**
     * Returns the student remote service.
     *
     * @return the student remote service
     */
    public com.opensource.techblog.sampleservice.service.StudentService getStudentService() {
        return studentService;
    }

    /**
     * Sets the student remote service.
     *
     * @param studentService the student remote service
     */
    public void setStudentService(
        com.opensource.techblog.sampleservice.service.StudentService studentService) {
        this.studentService = studentService;
    }

    /**
     * Returns the student persistence.
     *
     * @return the student persistence
     */
    public StudentPersistence getStudentPersistence() {
        return studentPersistence;
    }

    /**
     * Sets the student persistence.
     *
     * @param studentPersistence the student persistence
     */
    public void setStudentPersistence(StudentPersistence studentPersistence) {
        this.studentPersistence = studentPersistence;
    }

    /**
     * Returns the teacher local service.
     *
     * @return the teacher local service
     */
    public com.opensource.techblog.sampleservice.service.TeacherLocalService getTeacherLocalService() {
        return teacherLocalService;
    }

    /**
     * Sets the teacher local service.
     *
     * @param teacherLocalService the teacher local service
     */
    public void setTeacherLocalService(
        com.opensource.techblog.sampleservice.service.TeacherLocalService teacherLocalService) {
        this.teacherLocalService = teacherLocalService;
    }

    /**
     * Returns the teacher remote service.
     *
     * @return the teacher remote service
     */
    public com.opensource.techblog.sampleservice.service.TeacherService getTeacherService() {
        return teacherService;
    }

    /**
     * Sets the teacher remote service.
     *
     * @param teacherService the teacher remote service
     */
    public void setTeacherService(
        com.opensource.techblog.sampleservice.service.TeacherService teacherService) {
        this.teacherService = teacherService;
    }

    /**
     * Returns the teacher persistence.
     *
     * @return the teacher persistence
     */
    public TeacherPersistence getTeacherPersistence() {
        return teacherPersistence;
    }

    /**
     * Sets the teacher persistence.
     *
     * @param teacherPersistence the teacher persistence
     */
    public void setTeacherPersistence(TeacherPersistence teacherPersistence) {
        this.teacherPersistence = teacherPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.opensource.techblog.sampleservice.model.Teacher",
            teacherLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.opensource.techblog.sampleservice.model.Teacher");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Teacher.class;
    }

    protected String getModelClassName() {
        return Teacher.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = teacherPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
