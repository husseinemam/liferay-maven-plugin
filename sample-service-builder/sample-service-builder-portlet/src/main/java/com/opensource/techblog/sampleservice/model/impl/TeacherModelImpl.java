package com.opensource.techblog.sampleservice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.opensource.techblog.sampleservice.model.Teacher;
import com.opensource.techblog.sampleservice.model.TeacherModel;
import com.opensource.techblog.sampleservice.model.TeacherSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Teacher service. Represents a row in the &quot;sample_sb_Teacher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.opensource.techblog.sampleservice.model.TeacherModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeacherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherImpl
 * @see com.opensource.techblog.sampleservice.model.Teacher
 * @see com.opensource.techblog.sampleservice.model.TeacherModel
 * @generated
 */
@JSON(strict = true)
public class TeacherModelImpl extends BaseModelImpl<Teacher>
    implements TeacherModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a teacher model instance should use the {@link com.opensource.techblog.sampleservice.model.Teacher} interface instead.
     */
    public static final String TABLE_NAME = "sample_sb_Teacher";
    public static final Object[][] TABLE_COLUMNS = {
            { "teacherId", Types.BIGINT },
            { "teacherName", Types.BIGINT },
            { "dob", Types.BIGINT },
            { "subject", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sample_sb_Teacher (teacherId LONG not null primary key,teacherName LONG,dob LONG,subject LONG)";
    public static final String TABLE_SQL_DROP = "drop table sample_sb_Teacher";
    public static final String ORDER_BY_JPQL = " ORDER BY teacher.teacherId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sample_sb_Teacher.teacherId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.opensource.techblog.sampleservice.model.Teacher"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.opensource.techblog.sampleservice.model.Teacher"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.opensource.techblog.sampleservice.model.Teacher"));
    private static ClassLoader _classLoader = Teacher.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Teacher.class
        };
    private long _teacherId;
    private long _teacherName;
    private long _dob;
    private long _subject;
    private Teacher _escapedModel;

    public TeacherModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Teacher toModel(TeacherSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Teacher model = new TeacherImpl();

        model.setTeacherId(soapModel.getTeacherId());
        model.setTeacherName(soapModel.getTeacherName());
        model.setDob(soapModel.getDob());
        model.setSubject(soapModel.getSubject());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Teacher> toModels(TeacherSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Teacher> models = new ArrayList<Teacher>(soapModels.length);

        for (TeacherSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _teacherId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTeacherId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _teacherId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Teacher.class;
    }

    @Override
    public String getModelClassName() {
        return Teacher.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("teacherId", getTeacherId());
        attributes.put("teacherName", getTeacherName());
        attributes.put("dob", getDob());
        attributes.put("subject", getSubject());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long teacherId = (Long) attributes.get("teacherId");

        if (teacherId != null) {
            setTeacherId(teacherId);
        }

        Long teacherName = (Long) attributes.get("teacherName");

        if (teacherName != null) {
            setTeacherName(teacherName);
        }

        Long dob = (Long) attributes.get("dob");

        if (dob != null) {
            setDob(dob);
        }

        Long subject = (Long) attributes.get("subject");

        if (subject != null) {
            setSubject(subject);
        }
    }

    @JSON
    @Override
    public long getTeacherId() {
        return _teacherId;
    }

    @Override
    public void setTeacherId(long teacherId) {
        _teacherId = teacherId;
    }

    @JSON
    @Override
    public long getTeacherName() {
        return _teacherName;
    }

    @Override
    public void setTeacherName(long teacherName) {
        _teacherName = teacherName;
    }

    @JSON
    @Override
    public long getDob() {
        return _dob;
    }

    @Override
    public void setDob(long dob) {
        _dob = dob;
    }

    @JSON
    @Override
    public long getSubject() {
        return _subject;
    }

    @Override
    public void setSubject(long subject) {
        _subject = subject;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Teacher.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Teacher toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Teacher) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TeacherImpl teacherImpl = new TeacherImpl();

        teacherImpl.setTeacherId(getTeacherId());
        teacherImpl.setTeacherName(getTeacherName());
        teacherImpl.setDob(getDob());
        teacherImpl.setSubject(getSubject());

        teacherImpl.resetOriginalValues();

        return teacherImpl;
    }

    @Override
    public int compareTo(Teacher teacher) {
        long primaryKey = teacher.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Teacher)) {
            return false;
        }

        Teacher teacher = (Teacher) obj;

        long primaryKey = teacher.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Teacher> toCacheModel() {
        TeacherCacheModel teacherCacheModel = new TeacherCacheModel();

        teacherCacheModel.teacherId = getTeacherId();

        teacherCacheModel.teacherName = getTeacherName();

        teacherCacheModel.dob = getDob();

        teacherCacheModel.subject = getSubject();

        return teacherCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{teacherId=");
        sb.append(getTeacherId());
        sb.append(", teacherName=");
        sb.append(getTeacherName());
        sb.append(", dob=");
        sb.append(getDob());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.opensource.techblog.sampleservice.model.Teacher");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>teacherId</column-name><column-value><![CDATA[");
        sb.append(getTeacherId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>teacherName</column-name><column-value><![CDATA[");
        sb.append(getTeacherName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dob</column-name><column-value><![CDATA[");
        sb.append(getDob());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
